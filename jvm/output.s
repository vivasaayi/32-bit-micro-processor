; Generated by Simple C Compiler
; Custom RISC Assembly Output

    ; Runtime support functions
malloc:
    ; Simple malloc - returns fixed heap addresses
    load r1, heap_ptr
    add r2, r1, r0
    store r2, heap_ptr
    mov r0, r1
    ret

putchar:
    ; Output character in r0
    out r0
    ret

strlen:
    ; String length - string pointer in r0
    mov r1, r0
    mov r0, #0
strlen_loop:
    load r2, [r1]
    cmp r2, #0
    je strlen_end
    add r0, r0, #1
    add r1, r1, #1
    jmp strlen_loop
strlen_end:
    ret

; Data section
heap_ptr: .word 0x10000

    ; Compound statement
    ; Compound statement
    ; Compound statement
    ; Compound statement
    ; Compound statement
    ; Compound statement
    ; Function call
    lea r3, str0
    jmp str0_end
str0: .string "Running test
"
str0_end:
    push r3
    call printf
    add sp, sp, #4
    mov r0, r0
    ; Function call
    call jvm_create
    mov r1, r0
    ; Store to complex lvalue (simplified)
    mov r0, r1
    ; If statement
    ; Undefined symbol
    mov r1, #0
    not r0, r1
    cmp r0, #0
    je L1
    ; Compound statement
    ; Function call
    lea r3, str3
    jmp str3_end
str3: .string "Failed to create JVM
"
str3_end:
    push r3
    call printf
    add sp, sp, #4
    mov r0, r0
    ; Return statement
    mov r0, #0
    add sp, sp, #64
    pop fp
    ret 
    jmp L2
L1:
L2:
    ; Function call
    lea r3, str4
    jmp str4_end
str4: .string "Executing bytecode...
"
str4_end:
    push r3
    call printf
    add sp, sp, #4
    mov r0, r0
    ; Variable declaration
; Variable result allocated
    ; Function call
    ; Undefined symbol
    mov r3, #0
    push r3
    ; Undefined symbol
    mov r3, #0
    push r3
    ; Undefined symbol
    mov r3, #0
    push r3
    call jvm_execute
    add sp, sp, #12
    mov r1, r0
    ; Store initializer value for result
    ; Function call
    lea r3, str5
    jmp str5_end
str5: .string "Test completed
"
str5_end:
    push r3
    call printf
    add sp, sp, #4
    mov r0, r0
    ; Function call
    ; Undefined symbol
    mov r3, #0
    push r3
    call jvm_destroy
    add sp, sp, #4
    mov r0, r0
    ; Function declaration
disassemble:
    push fp
    mov fp, sp
    sub sp, sp, #64
    ; Compound statement
    ; Function call
    lea r3, str6
    jmp str6_end
str6: .string "
Bytecode disassembly:
"
str6_end:
    push r3
    call printf
    add sp, sp, #4
    mov r0, r0
    ; Variable declaration
; Variable pc allocated
    mov r1, #0
    ; Store initializer value for pc
    ; While loop
L7:
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    cmp r1, r2
    setlt r0
    cmp r0, #0
    je L8
    ; Compound statement
    ; Function call
    lea r3, str9
    jmp str9_end
str9: .string "%04x: "
str9_end:
    push r3
    ; Undefined symbol
    mov r3, #0
    push r3
    call printf
    add sp, sp, #8
    mov r0, r0
    ; Unknown expression type
    jmp L7
L8:
    ; Function call
    lea r3, str10
    jmp str10_end
str10: .string "
"
str10_end:
    push r3
    call printf
    add sp, sp, #4
    mov r0, r0
disassemble_end:
    add sp, sp, #64
    pop fp
    ret 

    ; Function declaration
main:
    push fp
    mov fp, sp
    sub sp, sp, #64
    ; Compound statement
    ; Function call
    lea r3, str11
    jmp str11_end
str11: .string "AruviJVM - Simple Java Bytecode Interpreter
"
str11_end:
    push r3
    call printf
    add sp, sp, #4
    mov r0, r0
    ; Function call
    lea r3, str12
    jmp str12_end
str12: .string "===========================================
"
str12_end:
    push r3
    call printf
    add sp, sp, #4
    mov r0, r0
    ; Function call
    lea r3, str13
    jmp str13_end
str13: .string "Arithmetic (5 + 3 * 2)"
str13_end:
    push r3
    ; Undefined symbol
    mov r3, #0
    push r3
    ; Function call
    ; Undefined symbol
    mov r3, #0
    push r3
    call sizeof
    add sp, sp, #4
    mov r3, r0
    push r3
    call run_test
    add sp, sp, #12
    mov r0, r0
    ; Function call
    lea r3, str14
    jmp str14_end
str14: .string "Local Variables (42 + 10)"
str14_end:
    push r3
    ; Undefined symbol
    mov r3, #0
    push r3
    ; Function call
    ; Undefined symbol
    mov r3, #0
    push r3
    call sizeof
    add sp, sp, #4
    mov r3, r0
    push r3
    call run_test
    add sp, sp, #12
    mov r0, r0
    ; Function call
    lea r3, str15
    jmp str15_end
str15: .string "Conditional Branch (10 > 5)"
str15_end:
    push r3
    ; Undefined symbol
    mov r3, #0
    push r3
    ; Function call
    ; Undefined symbol
    mov r3, #0
    push r3
    call sizeof
    add sp, sp, #4
    mov r3, r0
    push r3
    call run_test
    add sp, sp, #12
    mov r0, r0
    ; Function call
    lea r3, str16
    jmp str16_end
str16: .string "Simple Counting (1+1+1)"
str16_end:
    push r3
    ; Undefined symbol
    mov r3, #0
    push r3
    ; Function call
    ; Undefined symbol
    mov r3, #0
    push r3
    call sizeof
    add sp, sp, #4
    mov r3, r0
    push r3
    call run_test
    add sp, sp, #12
    mov r0, r0
    ; Function call
    lea r3, str17
    jmp str17_end
str17: .string "
=== Disassembly Example (Arithmetic Test) ==="
str17_end:
    push r3
    call printf
    add sp, sp, #4
    mov r0, r0
    ; Function call
    ; Undefined symbol
    mov r3, #0
    push r3
    ; Function call
    ; Undefined symbol
    mov r3, #0
    push r3
    call sizeof
    add sp, sp, #4
    mov r3, r0
    push r3
    call disassemble
    add sp, sp, #8
    mov r0, r0
    ; Return statement
    mov r0, #0
    add sp, sp, #64
    pop fp
    ret 
main_end:
    add sp, sp, #64
    pop fp
    ret 


; Program entry point
_start:
    call main
    halt
