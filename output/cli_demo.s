; Generated by Simple C Compiler
; Custom RISC Assembly Output

    ; Runtime support functions
malloc:
    ; Simple malloc - returns fixed heap addresses
    load r1, heap_ptr
    add r2, r1, r0
    store r2, heap_ptr
    mov r0, r1
    ret

putchar:
    ; Output character in r0
    out r0
    ret

strlen:
    ; String length - string pointer in r0
    mov r1, r0
    mov r0, #0
strlen_loop:
    load r2, [r1]
    cmp r2, #0
    je strlen_end
    add r0, r0, #1
    add r1, r1, #1
    jmp strlen_loop
strlen_end:
    ret

; Data section
heap_ptr: .word 0x10000

    ; Compound statement
    ; Variable declaration
; Variable cursor_x allocated
    ; Variable declaration
; Variable cursor_y allocated
    ; Variable declaration
; Variable fg_color allocated
    ; Variable declaration
; Variable bg_color allocated
    ; Undefined symbol
    mov r0, #0
    ; Function declaration
cli_init:
    push fp
    mov fp, sp
    sub sp, sp, #64
cli_init_end:
    add sp, sp, #64
    pop fp
    ret 

    ; Function declaration
cli_clear_screen:
    push fp
    mov fp, sp
    sub sp, sp, #64
cli_clear_screen_end:
    add sp, sp, #64
    pop fp
    ret 

    ; Function declaration
cli_set_color:
    push fp
    mov fp, sp
    sub sp, sp, #64
cli_set_color_end:
    add sp, sp, #64
    pop fp
    ret 

    ; Function declaration
cli_set_cursor:
    push fp
    mov fp, sp
    sub sp, sp, #64
cli_set_cursor_end:
    add sp, sp, #64
    pop fp
    ret 

    ; Function declaration
cli_putchar:
    push fp
    mov fp, sp
    sub sp, sp, #64
cli_putchar_end:
    add sp, sp, #64
    pop fp
    ret 

    ; Function declaration
cli_scroll_up:
    push fp
    mov fp, sp
    sub sp, sp, #64
cli_scroll_up_end:
    add sp, sp, #64
    pop fp
    ret 

    ; Function declaration
gfx_init:
    push fp
    mov fp, sp
    sub sp, sp, #64
gfx_init_end:
    add sp, sp, #64
    pop fp
    ret 

    ; Function declaration
gfx_set_pixel:
    push fp
    mov fp, sp
    sub sp, sp, #64
gfx_set_pixel_end:
    add sp, sp, #64
    pop fp
    ret 

    ; Function declaration
gfx_draw_line:
    push fp
    mov fp, sp
    sub sp, sp, #64
gfx_draw_line_end:
    add sp, sp, #64
    pop fp
    ret 

    ; Function declaration
gfx_draw_rect:
    push fp
    mov fp, sp
    sub sp, sp, #64
gfx_draw_rect_end:
    add sp, sp, #64
    pop fp
    ret 

    ; Function declaration
gfx_fill_rect:
    push fp
    mov fp, sp
    sub sp, sp, #64
gfx_fill_rect_end:
    add sp, sp, #64
    pop fp
    ret 

    ; Function declaration
gfx_clear_screen:
    push fp
    mov fp, sp
    sub sp, sp, #64
gfx_clear_screen_end:
    add sp, sp, #64
    pop fp
    ret 

    ; Function declaration
cli_init:
    push fp
    mov fp, sp
    sub sp, sp, #64
    ; Compound statement
    ; Function call
    ; Undefined symbol
    mov r3, #0
    push r3
    ; Undefined symbol
    mov r3, #0
    push r3
    call WRITE_REG
    add sp, sp, #8
    mov r0, r0
    mov r1, #0
    ; Store to complex lvalue (simplified)
    mov r0, r1
    mov r1, #0
    ; Store to complex lvalue (simplified)
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    ; Store to complex lvalue (simplified)
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    ; Store to complex lvalue (simplified)
    mov r0, r1
    ; Function call
    ; Undefined symbol
    mov r3, #0
    push r3
    ; Undefined symbol
    mov r3, #0
    push r3
    call cli_set_color
    add sp, sp, #8
    mov r0, r0
    ; Function call
    call cli_clear_screen
    mov r0, r0
cli_init_end:
    add sp, sp, #64
    pop fp
    ret 

    ; Function declaration
cli_clear_screen:
    push fp
    mov fp, sp
    sub sp, sp, #64
    ; Compound statement
    ; For loop (simplified)
    ; Compound statement
    ; Undefined symbol
    mov r1, #0
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    ; Undefined symbol
    mov r3, #0
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    mov r1, #0
    ; Store to complex lvalue (simplified)
    mov r0, r1
    mov r1, #0
    ; Store to complex lvalue (simplified)
    mov r0, r1
    ; Function call
    mov r3, #0
    push r3
    mov r3, #0
    push r3
    call cli_set_cursor
    add sp, sp, #8
    mov r0, r0
cli_clear_screen_end:
    add sp, sp, #64
    pop fp
    ret 

    ; Function declaration
cli_set_color:
    push fp
    mov fp, sp
    sub sp, sp, #64
    ; Compound statement
    ; Undefined symbol
    mov r1, #0
    ; Store to complex lvalue (simplified)
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    ; Store to complex lvalue (simplified)
    mov r0, r1
    ; Function call
    ; Undefined symbol
    mov r3, #0
    push r3
    ; Undefined symbol
    mov r3, #0
    push r3
    call WRITE_REG
    add sp, sp, #8
    mov r0, r0
cli_set_color_end:
    add sp, sp, #64
    pop fp
    ret 

    ; Function declaration
cli_set_cursor:
    push fp
    mov fp, sp
    sub sp, sp, #64
    ; Compound statement
    ; If statement
    ; Undefined symbol
    mov r1, #0
    mov r2, #0
    cmp r1, r2
    setge r1
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    cmp r1, r2
    setlt r2
    and r1, r1, r2
    ; Undefined symbol
    mov r1, #0
    mov r2, #0
    cmp r1, r2
    setge r2
    and r1, r1, r2
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    cmp r1, r2
    setlt r2
    and r0, r1, r2
    cmp r0, #0
    je L0
    ; Compound statement
    ; Undefined symbol
    mov r1, #0
    ; Store to complex lvalue (simplified)
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    ; Store to complex lvalue (simplified)
    mov r0, r1
    ; Function call
    ; Undefined symbol
    mov r3, #0
    push r3
    ; Undefined symbol
    mov r3, #0
    push r3
    call WRITE_REG
    add sp, sp, #8
    mov r0, r0
    ; Function call
    ; Undefined symbol
    mov r3, #0
    push r3
    ; Undefined symbol
    mov r3, #0
    push r3
    call WRITE_REG
    add sp, sp, #8
    mov r0, r0
    jmp L1
L0:
L1:
cli_set_cursor_end:
    add sp, sp, #64
    pop fp
    ret 

    ; Function declaration
cli_putchar:
    push fp
    mov fp, sp
    sub sp, sp, #64
    ; Compound statement
    ; If statement
    ; Undefined symbol
    mov r1, #0
    mov r2, #0
    cmp r1, r2
    seteq r0
    cmp r0, #0
    je L2
    ; Compound statement
    mov r1, #0
    ; Store to complex lvalue (simplified)
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    ; Member access (simplified)
    add r0, r1, #1
    ; If statement
    ; Undefined symbol
    mov r1, #0
    ; Member access (simplified)
    ; Undefined symbol
    mov r2, #0
    cmp r1, r2
    setge r0
    cmp r0, #0
    je L4
    ; Compound statement
    ; Function call
    call cli_scroll_up
    mov r0, r0
    ; Undefined symbol
    mov r1, #0
    mov r2, #1
    sub r1, r1, r2
    ; Store to complex lvalue (simplified)
    mov r0, r1
    jmp L5
L4:
L5:
    ; Function call
    ; Undefined symbol
    mov r3, #0
    ; Member access (simplified)
    push r3
    ; Undefined symbol
    mov r3, #0
    ; Member access (simplified)
    push r3
    call cli_set_cursor
    add sp, sp, #8
    mov r0, r0
    jmp L3
L2:
    ; Compound statement
    ; Variable declaration
; Variable pos allocated
    ; Undefined symbol
    mov r1, #0
    ; Member access (simplified)
    ; Undefined symbol
    mov r2, #0
    mul r1, r1, r2
    ; Undefined symbol
    mov r2, #0
    ; Member access (simplified)
    add r1, r1, r2
    ; Store initializer value for pos
    ; Undefined symbol
    mov r1, #0
    mov r2, #8
    shl r1, r1, r2
    ; Undefined symbol
    mov r2, #0
    or r1, r1, r2
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    ; Undefined symbol
    mov r3, #0
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    ; Member access (simplified)
    add r0, r1, #1
    ; If statement
    ; Undefined symbol
    mov r1, #0
    ; Member access (simplified)
    ; Undefined symbol
    mov r2, #0
    cmp r1, r2
    setge r0
    cmp r0, #0
    je L6
    ; Compound statement
    mov r1, #0
    ; Store to complex lvalue (simplified)
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    ; Member access (simplified)
    add r0, r1, #1
    ; If statement
    ; Undefined symbol
    mov r1, #0
    ; Member access (simplified)
    ; Undefined symbol
    mov r2, #0
    cmp r1, r2
    setge r0
    cmp r0, #0
    je L8
    ; Compound statement
    ; Function call
    call cli_scroll_up
    mov r0, r0
    ; Undefined symbol
    mov r1, #0
    mov r2, #1
    sub r1, r1, r2
    ; Store to complex lvalue (simplified)
    mov r0, r1
    jmp L9
L8:
L9:
    jmp L7
L6:
L7:
    ; Function call
    ; Undefined symbol
    mov r3, #0
    ; Member access (simplified)
    push r3
    ; Undefined symbol
    mov r3, #0
    ; Member access (simplified)
    push r3
    call cli_set_cursor
    add sp, sp, #8
    mov r0, r0
L3:
cli_putchar_end:
    add sp, sp, #64
    pop fp
    ret 

    ; Compound statement
    ; Function declaration
cli_scroll_up:
    push fp
    mov fp, sp
    sub sp, sp, #64
    ; Compound statement
    ; For loop (simplified)
    ; Compound statement
    ; For loop (simplified)
    ; Compound statement
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r1, #0
    mov r2, #1
    add r1, r1, r2
    ; Undefined symbol
    mov r2, #0
    mul r1, r1, r2
    ; Undefined symbol
    mov r2, #0
    add r2, r1, r2
    mul r2, r2, #4
    add r1, r1, r2
    load r1, [r1]
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    mul r1, r1, r2
    ; Undefined symbol
    mov r2, #0
    add r3, r1, r2
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    ; For loop (simplified)
    ; Compound statement
cli_scroll_up_end:
    add sp, sp, #64
    pop fp
    ret 

    ; Function declaration
gfx_init:
    push fp
    mov fp, sp
    sub sp, sp, #64
    ; Compound statement
    ; Function call
    ; Undefined symbol
    mov r3, #0
    push r3
    ; Undefined symbol
    mov r3, #0
    push r3
    call WRITE_REG
    add sp, sp, #8
    mov r0, r0
gfx_init_end:
    add sp, sp, #64
    pop fp
    ret 

    ; Function declaration
gfx_set_pixel:
    push fp
    mov fp, sp
    sub sp, sp, #64
    ; Compound statement
    ; If statement
    ; Undefined symbol
    mov r1, #0
    mov r2, #0
    cmp r1, r2
    setge r1
    ; Undefined symbol
    mov r1, #0
    mov r2, #640
    cmp r1, r2
    setlt r2
    and r1, r1, r2
    ; Undefined symbol
    mov r1, #0
    mov r2, #0
    cmp r1, r2
    setge r2
    and r1, r1, r2
    ; Undefined symbol
    mov r1, #0
    mov r2, #480
    cmp r1, r2
    setlt r2
    and r0, r1, r2
    cmp r0, #0
    je L10
    ; Compound statement
    ; Undefined symbol
    mov r1, #0
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    ; Undefined symbol
    mov r1, #0
    mov r2, #640
    mul r1, r1, r2
    ; Undefined symbol
    mov r2, #0
    add r3, r1, r2
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    jmp L11
L10:
L11:
gfx_set_pixel_end:
    add sp, sp, #64
    pop fp
    ret 

    ; Function declaration
gfx_clear_screen:
    push fp
    mov fp, sp
    sub sp, sp, #64
    ; Compound statement
    ; For loop (simplified)
    ; Compound statement
    ; Undefined symbol
    mov r1, #0
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    ; Undefined symbol
    mov r3, #0
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
gfx_clear_screen_end:
    add sp, sp, #64
    pop fp
    ret 

    ; Function declaration
gfx_draw_line:
    push fp
    mov fp, sp
    sub sp, sp, #64
    ; Compound statement
    ; Variable declaration
; Variable dx allocated
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    sub r1, r1, r2
    ; Store initializer value for dx
    ; Variable declaration
; Variable dy allocated
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    sub r1, r1, r2
    ; Store initializer value for dy
    ; Variable declaration
; Variable dx_abs allocated
    ; Ternary operator: condition ? true : false
    ; Undefined symbol
    mov r1, #0
    mov r2, #0
    cmp r1, r2
    setlt r1
    cmp r1, #0
    je L_ternary_false_0
    ; Undefined symbol
    mov r1, #0
    neg r1, r1
    jmp L_ternary_end_0
L_ternary_false_0:
    ; Undefined symbol
    mov r1, #0
L_ternary_end_0:
    ; Store initializer value for dx_abs
    ; Variable declaration
; Variable dy_abs allocated
    ; Ternary operator: condition ? true : false
    ; Undefined symbol
    mov r1, #0
    mov r2, #0
    cmp r1, r2
    setlt r1
    cmp r1, #0
    je L_ternary_false_1
    ; Undefined symbol
    mov r1, #0
    neg r1, r1
    jmp L_ternary_end_1
L_ternary_false_1:
    ; Undefined symbol
    mov r1, #0
L_ternary_end_1:
    ; Store initializer value for dy_abs
    ; Variable declaration
; Variable x_inc allocated
    ; Ternary operator: condition ? true : false
    ; Undefined symbol
    mov r1, #0
    mov r2, #0
    cmp r1, r2
    setlt r1
    cmp r1, #0
    je L_ternary_false_2
    mov r1, #1
    neg r1, r1
    jmp L_ternary_end_2
L_ternary_false_2:
    mov r1, #1
L_ternary_end_2:
    ; Store initializer value for x_inc
    ; Variable declaration
; Variable y_inc allocated
    ; Ternary operator: condition ? true : false
    ; Undefined symbol
    mov r1, #0
    mov r2, #0
    cmp r1, r2
    setlt r1
    cmp r1, #0
    je L_ternary_false_3
    mov r1, #1
    neg r1, r1
    jmp L_ternary_end_3
L_ternary_false_3:
    mov r1, #1
L_ternary_end_3:
    ; Store initializer value for y_inc
    ; Variable declaration
; Variable error allocated
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    sub r1, r1, r2
    ; Store initializer value for error
    ; While loop
L12:
    mov r0, #1
    cmp r0, #0
    je L13
    ; Compound statement
    ; Function call
    ; Undefined symbol
    mov r3, #0
    push r3
    ; Undefined symbol
    mov r3, #0
    push r3
    ; Undefined symbol
    mov r3, #0
    push r3
    call gfx_set_pixel
    add sp, sp, #12
    mov r0, r0
    ; If statement
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    cmp r1, r2
    seteq r1
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    cmp r1, r2
    seteq r2
    and r0, r1, r2
    cmp r0, #0
    je L14
    jmp L13
    jmp L15
L14:
L15:
    ; Variable declaration
; Variable error2 allocated
    mov r1, #2
    ; Undefined symbol
    mov r2, #0
    mul r1, r1, r2
    ; Store initializer value for error2
    ; If statement
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r1, #0
    neg r2, r1
    cmp r1, r2
    setgt r0
    cmp r0, #0
    je L16
    ; Compound statement
    ; Compound assignment - expanding to regular assignment
    ; Load current value of error
    load r2, [error]
    ; Undefined symbol
    mov r3, #0
    sub r1, r2, r3
    ; Store to variable error
    store r1, [error]
    mov r0, r1
    ; Compound assignment - expanding to regular assignment
    ; Load current value of x
    load r2, [x]
    ; Undefined symbol
    mov r3, #0
    add r1, r2, r3
    ; Store to variable x
    store r1, [x]
    mov r0, r1
    jmp L17
L16:
L17:
    ; If statement
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    cmp r1, r2
    setlt r0
    cmp r0, #0
    je L18
    ; Compound statement
    ; Compound assignment - expanding to regular assignment
    ; Load current value of error
    load r2, [error]
    ; Undefined symbol
    mov r3, #0
    add r1, r2, r3
    ; Store to variable error
    store r1, [error]
    mov r0, r1
    ; Compound assignment - expanding to regular assignment
    ; Load current value of y
    load r2, [y]
    ; Undefined symbol
    mov r3, #0
    add r1, r2, r3
    ; Store to variable y
    store r1, [y]
    mov r0, r1
    jmp L19
L18:
L19:
    jmp L12
L13:
gfx_draw_line_end:
    add sp, sp, #64
    pop fp
    ret 

    ; Function declaration
gfx_draw_rect:
    push fp
    mov fp, sp
    sub sp, sp, #64
    ; Compound statement
    ; Function call
    ; Undefined symbol
    mov r3, #0
    push r3
    ; Undefined symbol
    mov r3, #0
    push r3
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    add r1, r1, r2
    mov r2, #1
    sub r3, r1, r2
    push r3
    ; Undefined symbol
    mov r3, #0
    push r3
    ; Undefined symbol
    mov r3, #0
    push r3
    call gfx_draw_line
    add sp, sp, #20
    mov r0, r0
    ; Function call
    ; Undefined symbol
    mov r3, #0
    push r3
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    add r1, r1, r2
    mov r2, #1
    sub r3, r1, r2
    push r3
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    add r1, r1, r2
    mov r2, #1
    sub r3, r1, r2
    push r3
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    add r1, r1, r2
    mov r2, #1
    sub r3, r1, r2
    push r3
    ; Undefined symbol
    mov r3, #0
    push r3
    call gfx_draw_line
    add sp, sp, #20
    mov r0, r0
    ; Function call
    ; Undefined symbol
    mov r3, #0
    push r3
    ; Undefined symbol
    mov r3, #0
    push r3
    ; Undefined symbol
    mov r3, #0
    push r3
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    add r1, r1, r2
    mov r2, #1
    sub r3, r1, r2
    push r3
    ; Undefined symbol
    mov r3, #0
    push r3
    call gfx_draw_line
    add sp, sp, #20
    mov r0, r0
    ; Function call
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    add r1, r1, r2
    mov r2, #1
    sub r3, r1, r2
    push r3
    ; Undefined symbol
    mov r3, #0
    push r3
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    add r1, r1, r2
    mov r2, #1
    sub r3, r1, r2
    push r3
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    add r1, r1, r2
    mov r2, #1
    sub r3, r1, r2
    push r3
    ; Undefined symbol
    mov r3, #0
    push r3
    call gfx_draw_line
    add sp, sp, #20
    mov r0, r0
gfx_draw_rect_end:
    add sp, sp, #64
    pop fp
    ret 

    ; Function declaration
gfx_fill_rect:
    push fp
    mov fp, sp
    sub sp, sp, #64
    ; Compound statement
    ; For loop (simplified)
    ; Compound statement
    ; For loop (simplified)
    ; Compound statement
    ; Function call
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    add r3, r1, r2
    push r3
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    add r3, r1, r2
    push r3
    ; Undefined symbol
    mov r3, #0
    push r3
    call gfx_set_pixel
    add sp, sp, #12
    mov r0, r0
gfx_fill_rect_end:
    add sp, sp, #64
    pop fp
    ret 

    ; Function declaration
main:
    push fp
    mov fp, sp
    sub sp, sp, #64
    ; Compound statement
    ; Function call
    call cli_init
    mov r0, r0
    ; Function call
    lea r3, str20
    jmp str20_end
str20: .string "=== Display System Demo ===

"
str20_end:
    push r3
    call cli_puts
    add sp, sp, #4
    mov r0, r0
    ; Function call
    lea r3, str21
    jmp str21_end
str21: .string "1. Text Mode Features:
"
str21_end:
    push r3
    call cli_puts
    add sp, sp, #4
    mov r0, r0
    ; Function call
    ; Undefined symbol
    mov r3, #0
    push r3
    ; Undefined symbol
    mov r3, #0
    push r3
    call cli_set_color
    add sp, sp, #8
    mov r0, r0
    ; Function call
    lea r3, str22
    jmp str22_end
str22: .string "   * Colored text support
"
str22_end:
    push r3
    call cli_puts
    add sp, sp, #4
    mov r0, r0
    ; Function call
    ; Undefined symbol
    mov r3, #0
    push r3
    ; Undefined symbol
    mov r3, #0
    push r3
    call cli_set_color
    add sp, sp, #8
    mov r0, r0
    ; Function call
    lea r3, str23
    jmp str23_end
str23: .string "   * Multiple colors available
"
str23_end:
    push r3
    call cli_puts
    add sp, sp, #4
    mov r0, r0
    ; Function call
    ; Undefined symbol
    mov r3, #0
    push r3
    ; Undefined symbol
    mov r3, #0
    push r3
    call cli_set_color
    add sp, sp, #8
    mov r0, r0
    ; Function call
    lea r3, str24
    jmp str24_end
str24: .string "   * Easy color switching

"
str24_end:
    push r3
    call cli_puts
    add sp, sp, #4
    mov r0, r0
    ; Function call
    lea r3, str25
    jmp str25_end
str25: .string "2. Cursor Control:
"
str25_end:
    push r3
    call cli_puts
    add sp, sp, #4
    mov r0, r0
    ; Function call
    mov r3, #10
    push r3
    ; Undefined symbol
    mov r3, #0
    ; Member access (simplified)
    push r3
    call cli_set_cursor
    add sp, sp, #8
    mov r0, r0
    ; Function call
    lea r3, str26
    jmp str26_end
str26: .string "This text is indented!
"
str26_end:
    push r3
    call cli_puts
    add sp, sp, #4
    mov r0, r0
    ; Function call
    mov r3, #0
    push r3
    ; Undefined symbol
    mov r3, #0
    ; Member access (simplified)
    push r3
    call cli_set_cursor
    add sp, sp, #8
    mov r0, r0
    ; Function call
    lea r3, str27
    jmp str27_end
str27: .string "   Back to normal position

"
str27_end:
    push r3
    call cli_puts
    add sp, sp, #4
    mov r0, r0
    ; Function call
    lea r3, str28
    jmp str28_end
str28: .string "3. Switching to Graphics Mode...
"
str28_end:
    push r3
    call cli_puts
    add sp, sp, #4
    mov r0, r0
    ; For loop (simplified)
    ; Compound statement
    ; Function call
    call gfx_init
    mov r0, r0
    ; Function call
    ; Undefined symbol
    mov r3, #0
    push r3
    call gfx_clear_screen
    add sp, sp, #4
    mov r0, r0
    ; Function call
    mov r3, #10
    push r3
    mov r3, #10
    push r3
    mov r3, #620
    push r3
    mov r3, #460
    push r3
    ; Undefined symbol
    mov r3, #0
    push r3
    call gfx_draw_rect
    add sp, sp, #20
    mov r0, r0
    ; Function call
    mov r3, #50
    push r3
    mov r3, #50
    push r3
    mov r3, #100
    push r3
    mov r3, #80
    push r3
    ; Undefined symbol
    mov r3, #0
    push r3
    call gfx_fill_rect
    add sp, sp, #20
    mov r0, r0
    ; Function call
    mov r3, #200
    push r3
    mov r3, #50
    push r3
    mov r3, #100
    push r3
    mov r3, #80
    push r3
    ; Undefined symbol
    mov r3, #0
    push r3
    call gfx_fill_rect
    add sp, sp, #20
    mov r0, r0
    ; Function call
    mov r3, #350
    push r3
    mov r3, #50
    push r3
    mov r3, #100
    push r3
    mov r3, #80
    push r3
    ; Undefined symbol
    mov r3, #0
    push r3
    call gfx_fill_rect
    add sp, sp, #20
    mov r0, r0
    ; Function call
    mov r3, #50
    push r3
    mov r3, #200
    push r3
    mov r3, #550
    push r3
    mov r3, #200
    push r3
    ; Undefined symbol
    mov r3, #0
    push r3
    call gfx_draw_line
    add sp, sp, #20
    mov r0, r0
    ; Function call
    mov r3, #50
    push r3
    mov r3, #250
    push r3
    mov r3, #550
    push r3
    mov r3, #350
    push r3
    ; Undefined symbol
    mov r3, #0
    push r3
    call gfx_draw_line
    add sp, sp, #20
    mov r0, r0
    ; Function call
    mov r3, #550
    push r3
    mov r3, #250
    push r3
    mov r3, #50
    push r3
    mov r3, #350
    push r3
    ; Undefined symbol
    mov r3, #0
    push r3
    call gfx_draw_line
    add sp, sp, #20
    mov r0, r0
    ; For loop (simplified)
    ; Compound statement
    ; Function call
    mov r1, #100
    ; Undefined symbol
    mov r2, #0
    add r3, r1, r2
    push r3
    mov r1, #400
    ; Undefined symbol
    mov r1, #0
    mov r2, #10
    mod r2, r1, r2
    add r3, r1, r2
    push r3
    ; Undefined symbol
    mov r3, #0
    push r3
    call gfx_set_pixel
    add sp, sp, #12
    mov r0, r0
    ; Function call
    mov r1, #100
    ; Undefined symbol
    mov r2, #0
    add r3, r1, r2
    push r3
    mov r1, #410
    ; Undefined symbol
    mov r1, #0
    mov r2, #15
    mod r2, r1, r2
    add r3, r1, r2
    push r3
    ; Undefined symbol
    mov r3, #0
    push r3
    call gfx_set_pixel
    add sp, sp, #12
    mov r0, r0
    ; For loop (simplified)
    ; Compound statement
    ; Function call
    ; Undefined symbol
    mov r3, #0
    push r3
    ; Undefined symbol
    mov r3, #0
    push r3
    call WRITE_REG
    add sp, sp, #8
    mov r0, r0
    ; Function call
    mov r3, #0
    push r3
    mov r3, #20
    push r3
    call cli_set_cursor
    add sp, sp, #8
    mov r0, r0
    ; Function call
    ; Undefined symbol
    mov r3, #0
    push r3
    ; Undefined symbol
    mov r3, #0
    push r3
    call cli_set_color
    add sp, sp, #8
    mov r0, r0
    ; Function call
    lea r3, str29
    jmp str29_end
str29: .string "Mixed Mode: Graphics + Text Overlay"
str29_end:
    push r3
    call cli_puts
    add sp, sp, #4
    mov r0, r0
    ; Function call
    mov r3, #0
    push r3
    mov r3, #21
    push r3
    call cli_set_cursor
    add sp, sp, #8
    mov r0, r0
    ; Function call
    lea r3, str30
    jmp str30_end
str30: .string "Text appears over graphics background"
str30_end:
    push r3
    call cli_puts
    add sp, sp, #4
    mov r0, r0
    ; Function call
    mov r3, #0
    push r3
    mov r3, #23
    push r3
    call cli_set_cursor
    add sp, sp, #8
    mov r0, r0
    ; Function call
    lea r3, str31
    jmp str31_end
str31: .string "CLI Demo Complete!"
str31_end:
    push r3
    call cli_puts
    add sp, sp, #4
    mov r0, r0
    ; Return statement
    mov r0, #0
    add sp, sp, #64
    pop fp
    ret 
main_end:
    add sp, sp, #64
    pop fp
    ret 


; Program entry point
_start:
    call main
    halt
