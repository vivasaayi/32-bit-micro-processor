; Generated by Simple C Compiler
; Custom RISC Assembly Output

    ; Runtime support functions
malloc:
    ; Simple malloc - returns fixed heap addresses
    load r1, heap_ptr
    add r2, r1, r0
    store r2, heap_ptr
    mov r0, r1
    ret

putchar:
    ; Output character in r0
    out r0
    ret

strlen:
    ; String length - string pointer in r0
    mov r1, r0
    mov r0, #0
strlen_loop:
    load r2, [r1]
    cmp r2, #0
    je strlen_end
    add r0, r0, #1
    add r1, r1, #1
    jmp strlen_loop
strlen_end:
    ret

; Data section
heap_ptr: .word 0x10000

    ; Compound statement
    ; Type declaration (no runtime code)
    ; Type declaration (no runtime code)
    ; Variable declaration
; Array jvm_stack[1024] allocated (4096 bytes)
    ; Array base address for jvm_stack
    ; Variable declaration
; Variable jvm_sp allocated
    mov r1, #0
    ; Store initializer value for jvm_sp
    ; Variable declaration
; Array jvm_locals[256] allocated (1024 bytes)
    ; Array base address for jvm_locals
    ; Variable declaration
; Array jvm_memory[4096] allocated (16384 bytes)
    ; Array base address for jvm_memory
    ; Variable declaration
; Variable jvm_debug allocated
    mov r1, #0
    ; Store initializer value for jvm_debug
    ; Variable declaration
; Array global_bytecode[2048] allocated (8192 bytes)
    ; Array base address for global_bytecode
    ; Variable declaration
; Variable global_bytecode_length allocated
    mov r1, #0
    ; Store initializer value for global_bytecode_length
    ; Function declaration
jvm_push:
    push fp
    mov fp, sp
    sub sp, sp, #64
    ; Compound statement
    ; If statement
    ; Undefined symbol
    mov r1, #0
    mov r2, #1024
    cmp r1, r2
    setge r0
    cmp r0, #0
    je L0
    ; Compound statement
    ; Return statement
    mov r0, #0
    add sp, sp, #64
    pop fp
    ret 
    jmp L1
L0:
L1:
    ; Undefined symbol
    mov r1, #0
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    ; Undefined symbol
    mov r3, #0
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    mov r2, #1
    add r1, r1, r2
    ; Store to variable jvm_sp
    store r1, [jvm_sp]
    mov r0, r1
jvm_push_end:
    add sp, sp, #64
    pop fp
    ret 

    ; Function declaration
jvm_pop:
    push fp
    mov fp, sp
    sub sp, sp, #64
    ; Compound statement
    ; If statement
    ; Undefined symbol
    mov r1, #0
    mov r2, #0
    cmp r1, r2
    setle r0
    cmp r0, #0
    je L2
    ; Compound statement
    ; Return statement
    mov r0, #0
    add sp, sp, #64
    pop fp
    ret 
    jmp L3
L2:
L3:
    ; Undefined symbol
    mov r1, #0
    mov r2, #1
    sub r1, r1, r2
    ; Store to variable jvm_sp
    store r1, [jvm_sp]
    mov r0, r1
    ; Return statement
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    mul r2, r2, #4
    add r1, r1, r2
    load r0, [r1]
    add sp, sp, #64
    pop fp
    ret 
jvm_pop_end:
    add sp, sp, #64
    pop fp
    ret 

    ; Function declaration
jvm_store_local:
    push fp
    mov fp, sp
    sub sp, sp, #64
    ; Compound statement
    ; If statement
    ; Undefined symbol
    mov r1, #0
    mov r2, #0
    cmp r1, r2
    setge r1
    ; Undefined symbol
    mov r1, #0
    mov r2, #256
    cmp r1, r2
    setlt r2
    and r0, r1, r2
    cmp r0, #0
    je L4
    ; Compound statement
    ; Undefined symbol
    mov r1, #0
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    ; Undefined symbol
    mov r3, #0
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    jmp L5
L4:
L5:
jvm_store_local_end:
    add sp, sp, #64
    pop fp
    ret 

    ; Function declaration
jvm_load_local:
    push fp
    mov fp, sp
    sub sp, sp, #64
    ; Compound statement
    ; If statement
    ; Undefined symbol
    mov r1, #0
    mov r2, #0
    cmp r1, r2
    setge r1
    ; Undefined symbol
    mov r1, #0
    mov r2, #256
    cmp r1, r2
    setlt r2
    and r0, r1, r2
    cmp r0, #0
    je L6
    ; Compound statement
    ; Return statement
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    mul r2, r2, #4
    add r1, r1, r2
    load r0, [r1]
    add sp, sp, #64
    pop fp
    ret 
    jmp L7
L6:
L7:
    ; Return statement
    mov r0, #0
    add sp, sp, #64
    pop fp
    ret 
jvm_load_local_end:
    add sp, sp, #64
    pop fp
    ret 

    ; Function declaration
jvm_execute:
    push fp
    mov fp, sp
    sub sp, sp, #64
    ; Compound statement
    ; Variable declaration
; Variable pc allocated
    mov r1, #0
    ; Store initializer value for pc
    mov r1, #0
    ; Store to variable jvm_sp
    store r1, [jvm_sp]
    mov r0, r1
    ; Variable declaration
; Variable i allocated
    mov r1, #0
    ; Store initializer value for i
    ; While loop
L8:
    ; Undefined symbol
    mov r1, #0
    mov r2, #256
    cmp r1, r2
    setlt r0
    cmp r0, #0
    je L9
    ; Compound statement
    mov r1, #0
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    ; Undefined symbol
    mov r3, #0
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    mov r2, #1
    add r1, r1, r2
    ; Store to variable i
    store r1, [i]
    mov r0, r1
    jmp L8
L9:
    ; While loop
L10:
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    cmp r1, r2
    setlt r0
    cmp r0, #0
    je L11
    ; Compound statement
    ; Variable declaration
; Variable opcode allocated
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    mul r2, r2, #4
    add r1, r1, r2
    load r1, [r1]
    ; Store initializer value for opcode
    ; Undefined symbol
    mov r1, #0
    mov r2, #1
    add r1, r1, r2
    ; Store to variable pc
    store r1, [pc]
    mov r0, r1
    ; If statement
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    cmp r1, r2
    seteq r0
    cmp r0, #0
    je L12
    ; Compound statement
    ; Function call
    mov r1, #1
    neg r3, r1
    push r3
    call jvm_push
    add sp, sp, #4
    mov r0, r0
    jmp L13
L12:
L13:
    ; If statement
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    cmp r1, r2
    seteq r0
    cmp r0, #0
    je L14
    ; Compound statement
    ; Function call
    mov r3, #0
    push r3
    call jvm_push
    add sp, sp, #4
    mov r0, r0
    jmp L15
L14:
L15:
    ; If statement
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    cmp r1, r2
    seteq r0
    cmp r0, #0
    je L16
    ; Compound statement
    ; Function call
    mov r3, #1
    push r3
    call jvm_push
    add sp, sp, #4
    mov r0, r0
    jmp L17
L16:
L17:
    ; If statement
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    cmp r1, r2
    seteq r0
    cmp r0, #0
    je L18
    ; Compound statement
    ; Function call
    mov r3, #2
    push r3
    call jvm_push
    add sp, sp, #4
    mov r0, r0
    jmp L19
L18:
L19:
    ; If statement
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    cmp r1, r2
    seteq r0
    cmp r0, #0
    je L20
    ; Compound statement
    ; Function call
    mov r3, #3
    push r3
    call jvm_push
    add sp, sp, #4
    mov r0, r0
    jmp L21
L20:
L21:
    ; If statement
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    cmp r1, r2
    seteq r0
    cmp r0, #0
    je L22
    ; Compound statement
    ; Function call
    mov r3, #4
    push r3
    call jvm_push
    add sp, sp, #4
    mov r0, r0
    jmp L23
L22:
L23:
    ; If statement
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    cmp r1, r2
    seteq r0
    cmp r0, #0
    je L24
    ; Compound statement
    ; Function call
    mov r3, #5
    push r3
    call jvm_push
    add sp, sp, #4
    mov r0, r0
    jmp L25
L24:
L25:
    ; If statement
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    cmp r1, r2
    seteq r0
    cmp r0, #0
    je L26
    ; Compound statement
    ; Variable declaration
; Variable value allocated
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    mul r2, r2, #4
    add r1, r1, r2
    load r1, [r1]
    ; Store initializer value for value
    ; Undefined symbol
    mov r1, #0
    mov r2, #1
    add r1, r1, r2
    ; Store to variable pc
    store r1, [pc]
    mov r0, r1
    ; Function call
    ; Undefined symbol
    mov r3, #0
    push r3
    call jvm_push
    add sp, sp, #4
    mov r0, r0
    jmp L27
L26:
L27:
    ; If statement
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    cmp r1, r2
    seteq r0
    cmp r0, #0
    je L28
    ; Compound statement
    ; Variable declaration
; Variable high allocated
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    mul r2, r2, #4
    add r1, r1, r2
    load r1, [r1]
    ; Store initializer value for high
    ; Undefined symbol
    mov r1, #0
    mov r2, #1
    add r1, r1, r2
    ; Store to variable pc
    store r1, [pc]
    mov r0, r1
    ; Variable declaration
; Variable low allocated
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    mul r2, r2, #4
    add r1, r1, r2
    load r1, [r1]
    ; Store initializer value for low
    ; Undefined symbol
    mov r1, #0
    mov r2, #1
    add r1, r1, r2
    ; Store to variable pc
    store r1, [pc]
    mov r0, r1
    ; Variable declaration
; Variable value allocated
    ; Undefined symbol
    mov r1, #0
    mov r2, #256
    mul r1, r1, r2
    ; Undefined symbol
    mov r2, #0
    add r1, r1, r2
    ; Store initializer value for value
    ; Function call
    ; Undefined symbol
    mov r3, #0
    push r3
    call jvm_push
    add sp, sp, #4
    mov r0, r0
    jmp L29
L28:
L29:
    ; If statement
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    cmp r1, r2
    seteq r0
    cmp r0, #0
    je L30
    ; Compound statement
    ; Variable declaration
; Variable index allocated
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    mul r2, r2, #4
    add r1, r1, r2
    load r1, [r1]
    ; Store initializer value for index
    ; Undefined symbol
    mov r1, #0
    mov r2, #1
    add r1, r1, r2
    ; Store to variable pc
    store r1, [pc]
    mov r0, r1
    ; Function call
    ; Function call
    ; Undefined symbol
    mov r3, #0
    push r3
    call jvm_load_local
    add sp, sp, #4
    mov r3, r0
    push r3
    call jvm_push
    add sp, sp, #4
    mov r0, r0
    jmp L31
L30:
L31:
    ; If statement
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    cmp r1, r2
    seteq r0
    cmp r0, #0
    je L32
    ; Compound statement
    ; Function call
    ; Function call
    mov r3, #0
    push r3
    call jvm_load_local
    add sp, sp, #4
    mov r3, r0
    push r3
    call jvm_push
    add sp, sp, #4
    mov r0, r0
    jmp L33
L32:
L33:
    ; If statement
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    cmp r1, r2
    seteq r0
    cmp r0, #0
    je L34
    ; Compound statement
    ; Function call
    ; Function call
    mov r3, #1
    push r3
    call jvm_load_local
    add sp, sp, #4
    mov r3, r0
    push r3
    call jvm_push
    add sp, sp, #4
    mov r0, r0
    jmp L35
L34:
L35:
    ; If statement
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    cmp r1, r2
    seteq r0
    cmp r0, #0
    je L36
    ; Compound statement
    ; Function call
    ; Function call
    mov r3, #2
    push r3
    call jvm_load_local
    add sp, sp, #4
    mov r3, r0
    push r3
    call jvm_push
    add sp, sp, #4
    mov r0, r0
    jmp L37
L36:
L37:
    ; If statement
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    cmp r1, r2
    seteq r0
    cmp r0, #0
    je L38
    ; Compound statement
    ; Function call
    ; Function call
    mov r3, #3
    push r3
    call jvm_load_local
    add sp, sp, #4
    mov r3, r0
    push r3
    call jvm_push
    add sp, sp, #4
    mov r0, r0
    jmp L39
L38:
L39:
    ; If statement
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    cmp r1, r2
    seteq r0
    cmp r0, #0
    je L40
    ; Compound statement
    ; Variable declaration
; Variable index allocated
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    mul r2, r2, #4
    add r1, r1, r2
    load r1, [r1]
    ; Store initializer value for index
    ; Undefined symbol
    mov r1, #0
    mov r2, #1
    add r1, r1, r2
    ; Store to variable pc
    store r1, [pc]
    mov r0, r1
    ; Function call
    ; Undefined symbol
    mov r3, #0
    push r3
    ; Function call
    call jvm_pop
    mov r3, r0
    push r3
    call jvm_store_local
    add sp, sp, #8
    mov r0, r0
    jmp L41
L40:
L41:
    ; If statement
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    cmp r1, r2
    seteq r0
    cmp r0, #0
    je L42
    ; Compound statement
    ; Function call
    mov r3, #0
    push r3
    ; Function call
    call jvm_pop
    mov r3, r0
    push r3
    call jvm_store_local
    add sp, sp, #8
    mov r0, r0
    jmp L43
L42:
L43:
    ; If statement
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    cmp r1, r2
    seteq r0
    cmp r0, #0
    je L44
    ; Compound statement
    ; Function call
    mov r3, #1
    push r3
    ; Function call
    call jvm_pop
    mov r3, r0
    push r3
    call jvm_store_local
    add sp, sp, #8
    mov r0, r0
    jmp L45
L44:
L45:
    ; If statement
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    cmp r1, r2
    seteq r0
    cmp r0, #0
    je L46
    ; Compound statement
    ; Function call
    mov r3, #2
    push r3
    ; Function call
    call jvm_pop
    mov r3, r0
    push r3
    call jvm_store_local
    add sp, sp, #8
    mov r0, r0
    jmp L47
L46:
L47:
    ; If statement
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    cmp r1, r2
    seteq r0
    cmp r0, #0
    je L48
    ; Compound statement
    ; Function call
    mov r3, #3
    push r3
    ; Function call
    call jvm_pop
    mov r3, r0
    push r3
    call jvm_store_local
    add sp, sp, #8
    mov r0, r0
    jmp L49
L48:
L49:
    ; If statement
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    cmp r1, r2
    seteq r0
    cmp r0, #0
    je L50
    ; Compound statement
    ; Variable declaration
; Variable b allocated
    ; Function call
    call jvm_pop
    mov r1, r0
    ; Store initializer value for b
    ; Variable declaration
; Variable a allocated
    ; Function call
    call jvm_pop
    mov r1, r0
    ; Store initializer value for a
    ; Function call
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    add r3, r1, r2
    push r3
    call jvm_push
    add sp, sp, #4
    mov r0, r0
    jmp L51
L50:
L51:
    ; If statement
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    cmp r1, r2
    seteq r0
    cmp r0, #0
    je L52
    ; Compound statement
    ; Variable declaration
; Variable b allocated
    ; Function call
    call jvm_pop
    mov r1, r0
    ; Store initializer value for b
    ; Variable declaration
; Variable a allocated
    ; Function call
    call jvm_pop
    mov r1, r0
    ; Store initializer value for a
    ; Function call
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    sub r3, r1, r2
    push r3
    call jvm_push
    add sp, sp, #4
    mov r0, r0
    jmp L53
L52:
L53:
    ; If statement
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    cmp r1, r2
    seteq r0
    cmp r0, #0
    je L54
    ; Compound statement
    ; Variable declaration
; Variable b allocated
    ; Function call
    call jvm_pop
    mov r1, r0
    ; Store initializer value for b
    ; Variable declaration
; Variable a allocated
    ; Function call
    call jvm_pop
    mov r1, r0
    ; Store initializer value for a
    ; Function call
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    mul r3, r1, r2
    push r3
    call jvm_push
    add sp, sp, #4
    mov r0, r0
    jmp L55
L54:
L55:
    ; If statement
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    cmp r1, r2
    seteq r0
    cmp r0, #0
    je L56
    ; Compound statement
    ; Variable declaration
; Variable b allocated
    ; Function call
    call jvm_pop
    mov r1, r0
    ; Store initializer value for b
    ; Variable declaration
; Variable a allocated
    ; Function call
    call jvm_pop
    mov r1, r0
    ; Store initializer value for a
    ; If statement
    ; Undefined symbol
    mov r1, #0
    mov r2, #0
    cmp r1, r2
    setne r0
    cmp r0, #0
    je L58
    ; Compound statement
    ; Function call
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    div r3, r1, r2
    push r3
    call jvm_push
    add sp, sp, #4
    mov r0, r0
    jmp L59
L58:
    ; Compound statement
    ; Function call
    mov r3, #0
    push r3
    call jvm_push
    add sp, sp, #4
    mov r0, r0
L59:
    jmp L57
L56:
L57:
    ; If statement
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    cmp r1, r2
    seteq r0
    cmp r0, #0
    je L60
    ; Compound statement
    ; Variable declaration
; Variable b allocated
    ; Function call
    call jvm_pop
    mov r1, r0
    ; Store initializer value for b
    ; Variable declaration
; Variable a allocated
    ; Function call
    call jvm_pop
    mov r1, r0
    ; Store initializer value for a
    ; If statement
    ; Undefined symbol
    mov r1, #0
    mov r2, #0
    cmp r1, r2
    setne r0
    cmp r0, #0
    je L62
    ; Compound statement
    ; Function call
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    mod r3, r1, r2
    push r3
    call jvm_push
    add sp, sp, #4
    mov r0, r0
    jmp L63
L62:
    ; Compound statement
    ; Function call
    mov r3, #0
    push r3
    call jvm_push
    add sp, sp, #4
    mov r0, r0
L63:
    jmp L61
L60:
L61:
    ; If statement
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    cmp r1, r2
    seteq r0
    cmp r0, #0
    je L64
    ; Compound statement
    ; Variable declaration
; Variable a allocated
    ; Function call
    call jvm_pop
    mov r1, r0
    ; Store initializer value for a
    ; Function call
    ; Undefined symbol
    mov r1, #0
    neg r3, r1
    push r3
    call jvm_push
    add sp, sp, #4
    mov r0, r0
    jmp L65
L64:
L65:
    ; If statement
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    cmp r1, r2
    seteq r0
    cmp r0, #0
    je L66
    ; Compound statement
    ; Variable declaration
; Variable offset_high allocated
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    mul r2, r2, #4
    add r1, r1, r2
    load r1, [r1]
    ; Store initializer value for offset_high
    ; Undefined symbol
    mov r1, #0
    mov r2, #1
    add r1, r1, r2
    ; Store to variable pc
    store r1, [pc]
    mov r0, r1
    ; Variable declaration
; Variable offset_low allocated
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    mul r2, r2, #4
    add r1, r1, r2
    load r1, [r1]
    ; Store initializer value for offset_low
    ; Undefined symbol
    mov r1, #0
    mov r2, #1
    add r1, r1, r2
    ; Store to variable pc
    store r1, [pc]
    mov r0, r1
    ; Variable declaration
; Variable offset allocated
    ; Undefined symbol
    mov r1, #0
    mov r2, #256
    mul r1, r1, r2
    ; Undefined symbol
    mov r2, #0
    add r1, r1, r2
    ; Store initializer value for offset
    ; Variable declaration
; Variable b allocated
    ; Function call
    call jvm_pop
    mov r1, r0
    ; Store initializer value for b
    ; Variable declaration
; Variable a allocated
    ; Function call
    call jvm_pop
    mov r1, r0
    ; Store initializer value for a
    ; If statement
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    cmp r1, r2
    seteq r0
    cmp r0, #0
    je L68
    ; Compound statement
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    add r1, r1, r2
    mov r2, #3
    sub r1, r1, r2
    ; Store to variable pc
    store r1, [pc]
    mov r0, r1
    jmp L69
L68:
L69:
    jmp L67
L66:
L67:
    ; If statement
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    cmp r1, r2
    seteq r0
    cmp r0, #0
    je L70
    ; Compound statement
    ; Variable declaration
; Variable offset_high allocated
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    mul r2, r2, #4
    add r1, r1, r2
    load r1, [r1]
    ; Store initializer value for offset_high
    ; Undefined symbol
    mov r1, #0
    mov r2, #1
    add r1, r1, r2
    ; Store to variable pc
    store r1, [pc]
    mov r0, r1
    ; Variable declaration
; Variable offset_low allocated
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    mul r2, r2, #4
    add r1, r1, r2
    load r1, [r1]
    ; Store initializer value for offset_low
    ; Undefined symbol
    mov r1, #0
    mov r2, #1
    add r1, r1, r2
    ; Store to variable pc
    store r1, [pc]
    mov r0, r1
    ; Variable declaration
; Variable offset allocated
    ; Undefined symbol
    mov r1, #0
    mov r2, #256
    mul r1, r1, r2
    ; Undefined symbol
    mov r2, #0
    add r1, r1, r2
    ; Store initializer value for offset
    ; Variable declaration
; Variable b allocated
    ; Function call
    call jvm_pop
    mov r1, r0
    ; Store initializer value for b
    ; Variable declaration
; Variable a allocated
    ; Function call
    call jvm_pop
    mov r1, r0
    ; Store initializer value for a
    ; If statement
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    cmp r1, r2
    setne r0
    cmp r0, #0
    je L72
    ; Compound statement
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    add r1, r1, r2
    mov r2, #3
    sub r1, r1, r2
    ; Store to variable pc
    store r1, [pc]
    mov r0, r1
    jmp L73
L72:
L73:
    jmp L71
L70:
L71:
    ; If statement
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    cmp r1, r2
    seteq r0
    cmp r0, #0
    je L74
    ; Compound statement
    ; Variable declaration
; Variable offset_high allocated
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    mul r2, r2, #4
    add r1, r1, r2
    load r1, [r1]
    ; Store initializer value for offset_high
    ; Undefined symbol
    mov r1, #0
    mov r2, #1
    add r1, r1, r2
    ; Store to variable pc
    store r1, [pc]
    mov r0, r1
    ; Variable declaration
; Variable offset_low allocated
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    mul r2, r2, #4
    add r1, r1, r2
    load r1, [r1]
    ; Store initializer value for offset_low
    ; Undefined symbol
    mov r1, #0
    mov r2, #1
    add r1, r1, r2
    ; Store to variable pc
    store r1, [pc]
    mov r0, r1
    ; Variable declaration
; Variable offset allocated
    ; Undefined symbol
    mov r1, #0
    mov r2, #256
    mul r1, r1, r2
    ; Undefined symbol
    mov r2, #0
    add r1, r1, r2
    ; Store initializer value for offset
    ; Variable declaration
; Variable b allocated
    ; Function call
    call jvm_pop
    mov r1, r0
    ; Store initializer value for b
    ; Variable declaration
; Variable a allocated
    ; Function call
    call jvm_pop
    mov r1, r0
    ; Store initializer value for a
    ; If statement
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    cmp r1, r2
    setlt r0
    cmp r0, #0
    je L76
    ; Compound statement
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    add r1, r1, r2
    mov r2, #3
    sub r1, r1, r2
    ; Store to variable pc
    store r1, [pc]
    mov r0, r1
    jmp L77
L76:
L77:
    jmp L75
L74:
L75:
    ; If statement
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    cmp r1, r2
    seteq r0
    cmp r0, #0
    je L78
    ; Compound statement
    ; Variable declaration
; Variable offset_high allocated
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    mul r2, r2, #4
    add r1, r1, r2
    load r1, [r1]
    ; Store initializer value for offset_high
    ; Undefined symbol
    mov r1, #0
    mov r2, #1
    add r1, r1, r2
    ; Store to variable pc
    store r1, [pc]
    mov r0, r1
    ; Variable declaration
; Variable offset_low allocated
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    mul r2, r2, #4
    add r1, r1, r2
    load r1, [r1]
    ; Store initializer value for offset_low
    ; Undefined symbol
    mov r1, #0
    mov r2, #1
    add r1, r1, r2
    ; Store to variable pc
    store r1, [pc]
    mov r0, r1
    ; Variable declaration
; Variable offset allocated
    ; Undefined symbol
    mov r1, #0
    mov r2, #256
    mul r1, r1, r2
    ; Undefined symbol
    mov r2, #0
    add r1, r1, r2
    ; Store initializer value for offset
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    add r1, r1, r2
    mov r2, #3
    sub r1, r1, r2
    ; Store to variable pc
    store r1, [pc]
    mov r0, r1
    jmp L79
L78:
L79:
    ; If statement
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    cmp r1, r2
    seteq r0
    cmp r0, #0
    je L80
    ; Compound statement
    ; Return statement
    ; Function call
    call jvm_pop
    mov r0, r0
    add sp, sp, #64
    pop fp
    ret 
    jmp L81
L80:
L81:
    ; If statement
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    cmp r1, r2
    seteq r0
    cmp r0, #0
    je L82
    ; Compound statement
    ; Return statement
    mov r0, #0
    add sp, sp, #64
    pop fp
    ret 
    jmp L83
L82:
L83:
    ; If statement
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    cmp r1, r2
    seteq r0
    cmp r0, #0
    je L84
    ; Compound statement
    ; Return statement
    ; Ternary operator: condition ? true : false
    ; Undefined symbol
    mov r1, #0
    mov r2, #0
    cmp r1, r2
    setgt r1
    cmp r1, #0
    je L_ternary_false_0
    ; Function call
    call jvm_pop
    mov r0, r0
    jmp L_ternary_end_0
L_ternary_false_0:
    mov r0, #0
L_ternary_end_0:
    add sp, sp, #64
    pop fp
    ret 
    jmp L85
L84:
L85:
    jmp L10
L11:
    ; Return statement
    mov r0, #0
    add sp, sp, #64
    pop fp
    ret 
jvm_execute_end:
    add sp, sp, #64
    pop fp
    ret 

    ; Function declaration
load_embedded_bytecode:
    push fp
    mov fp, sp
    sub sp, sp, #64
    ; Compound statement
    ; If statement
    ; Undefined symbol
    mov r1, #0
    mov r2, #1
    cmp r1, r2
    seteq r0
    cmp r0, #0
    je L86
    ; Compound statement
    ; Undefined symbol
    mov r1, #0
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    mov r3, #0
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    mov r3, #1
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    mov r3, #2
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    mov r3, #3
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    mov r1, #4
    ; Store to variable global_bytecode_length
    store r1, [global_bytecode_length]
    mov r0, r1
    ; Return statement
    mov r0, #1
    add sp, sp, #64
    pop fp
    ret 
    jmp L87
L86:
L87:
    ; If statement
    ; Undefined symbol
    mov r1, #0
    mov r2, #2
    cmp r1, r2
    seteq r0
    cmp r0, #0
    je L88
    ; Compound statement
    ; Undefined symbol
    mov r1, #0
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    mov r3, #0
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    mov r1, #10
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    mov r3, #1
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    mov r3, #2
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    mov r3, #3
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    mov r3, #4
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    mov r3, #5
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    mov r3, #6
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    mov r3, #7
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    mov r3, #8
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    mov r3, #9
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    mov r3, #10
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    mov r1, #11
    ; Store to variable global_bytecode_length
    store r1, [global_bytecode_length]
    mov r0, r1
    ; Return statement
    mov r0, #1
    add sp, sp, #64
    pop fp
    ret 
    jmp L89
L88:
L89:
    ; If statement
    ; Undefined symbol
    mov r1, #0
    mov r2, #3
    cmp r1, r2
    seteq r0
    cmp r0, #0
    je L90
    ; Compound statement
    ; Undefined symbol
    mov r1, #0
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    mov r3, #0
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    mov r3, #1
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    mov r3, #2
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    mov r3, #3
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    mov r3, #4
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    mov r3, #5
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    mov r3, #6
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    mov r3, #7
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    mov r3, #8
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    mov r3, #9
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    mov r3, #10
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    mov r3, #11
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    mov r3, #12
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    mov r3, #13
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    mov r3, #14
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    mov r1, #0
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    mov r3, #15
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    mov r1, #13
    neg r1, r1
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    mov r3, #16
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    mov r3, #17
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    mov r3, #18
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    mov r1, #19
    ; Store to variable global_bytecode_length
    store r1, [global_bytecode_length]
    mov r0, r1
    ; Return statement
    mov r0, #1
    add sp, sp, #64
    pop fp
    ret 
    jmp L91
L90:
L91:
    ; Return statement
    mov r0, #0
    add sp, sp, #64
    pop fp
    ret 
load_embedded_bytecode_end:
    add sp, sp, #64
    pop fp
    ret 

    ; Function declaration
load_external_bytecode:
    push fp
    mov fp, sp
    sub sp, sp, #64
    ; Compound statement
    ; Undefined symbol
    mov r1, #0
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    mov r3, #0
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    mov r1, #42
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    mov r3, #1
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    mov r3, #2
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    mov r1, #3
    ; Store to variable global_bytecode_length
    store r1, [global_bytecode_length]
    mov r0, r1
    ; Return statement
    mov r0, #1
    add sp, sp, #64
    pop fp
    ret 
load_external_bytecode_end:
    add sp, sp, #64
    pop fp
    ret 

    ; Function declaration
main:
    push fp
    mov fp, sp
    sub sp, sp, #64
    ; Compound statement
    ; Variable declaration
; Variable choice allocated
    mov r1, #0
    ; Store initializer value for choice
    ; Variable declaration
; Variable result allocated
    mov r1, #0
    ; Store initializer value for result
    mov r1, #1
    ; Store to variable choice
    store r1, [choice]
    mov r0, r1
    ; Variable declaration
; Variable has_external allocated
    mov r1, #0
    ; Store initializer value for has_external
    ; If statement
    ; Undefined symbol
    mov r0, #0
    cmp r0, #0
    je L92
    ; Compound statement
    ; If statement
    ; Function call
    call load_external_bytecode
    mov r0, r0
    cmp r0, #0
    je L94
    ; Compound statement
    ; Function call
    call jvm_execute
    mov r1, r0
    ; Store to variable result
    store r1, [result]
    mov r0, r1
    ; Return statement
    ; Undefined symbol
    mov r0, #0
    add sp, sp, #64
    pop fp
    ret 
    jmp L95
L94:
L95:
    jmp L93
L92:
    ; Compound statement
    ; If statement
    ; Function call
    ; Undefined symbol
    mov r3, #0
    push r3
    call load_embedded_bytecode
    add sp, sp, #4
    mov r0, r0
    cmp r0, #0
    je L96
    ; Compound statement
    ; Function call
    call jvm_execute
    mov r1, r0
    ; Store to variable result
    store r1, [result]
    mov r0, r1
    ; Return statement
    ; Undefined symbol
    mov r0, #0
    add sp, sp, #64
    pop fp
    ret 
    jmp L97
L96:
L97:
L93:
    ; Return statement
    mov r1, #1
    neg r0, r1
    add sp, sp, #64
    pop fp
    ret 
main_end:
    add sp, sp, #64
    pop fp
    ret 


; Program entry point
_start:
    call main
    halt
