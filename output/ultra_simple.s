; Generated by Simple C Compiler
; Custom RISC Assembly Output

    ; Runtime support functions
malloc:
    ; Simple malloc - returns fixed heap addresses
    load r1, heap_ptr
    add r2, r1, r0
    store r2, heap_ptr
    mov r0, r1
    ret

putchar:
    ; Output character in r0
    out r0
    ret

strlen:
    ; String length - string pointer in r0
    mov r1, r0
    mov r0, #0
strlen_loop:
    load r2, [r1]
    cmp r2, #0
    je strlen_end
    add r0, r0, #1
    add r1, r1, #1
    jmp strlen_loop
strlen_end:
    ret

; Data section
heap_ptr: .word 0x10000

    ; Compound statement
    ; Function declaration
main:
    push fp
    mov fp, sp
    sub sp, sp, #64
    ; Compound statement
    ; Variable declaration
; Array stack[10] allocated (40 bytes)
    ; Array base address for stack
    ; Variable declaration
; Variable sp allocated
    mov r1, #0
    ; Store initializer value for sp
    mov r1, #5
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    ; Undefined symbol
    mov r3, #0
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    mov r2, #1
    add r1, r1, r2
    ; Store to variable sp
    store r1, [sp]
    mov r0, r1
    mov r1, #3
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    ; Undefined symbol
    mov r3, #0
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    mov r2, #1
    add r1, r1, r2
    ; Store to variable sp
    store r1, [sp]
    mov r0, r1
    mov r1, #2
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    ; Undefined symbol
    mov r3, #0
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    mov r2, #1
    add r1, r1, r2
    ; Store to variable sp
    store r1, [sp]
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    mov r2, #1
    sub r1, r1, r2
    ; Store to variable sp
    store r1, [sp]
    mov r0, r1
    ; Variable declaration
; Variable b allocated
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    mul r2, r2, #4
    add r1, r1, r2
    load r1, [r1]
    ; Store initializer value for b
    ; Undefined symbol
    mov r1, #0
    mov r2, #1
    sub r1, r1, r2
    ; Store to variable sp
    store r1, [sp]
    mov r0, r1
    ; Variable declaration
; Variable a allocated
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    mul r2, r2, #4
    add r1, r1, r2
    load r1, [r1]
    ; Store initializer value for a
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    mul r1, r1, r2
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    ; Undefined symbol
    mov r3, #0
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    mov r2, #1
    add r1, r1, r2
    ; Store to variable sp
    store r1, [sp]
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    mov r2, #1
    sub r1, r1, r2
    ; Store to variable sp
    store r1, [sp]
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    mul r2, r2, #4
    add r1, r1, r2
    load r1, [r1]
    ; Store to variable b
    store r1, [b]
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    mov r2, #1
    sub r1, r1, r2
    ; Store to variable sp
    store r1, [sp]
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    mul r2, r2, #4
    add r1, r1, r2
    load r1, [r1]
    ; Store to variable a
    store r1, [a]
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    add r1, r1, r2
    ; Store to array element
    ; Undefined symbol
    mov r2, #0
    ; Undefined symbol
    mov r3, #0
    mul r3, r3, #4
    add r2, r2, r3
    store r1, [r2]
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    mov r2, #1
    add r1, r1, r2
    ; Store to variable sp
    store r1, [sp]
    mov r0, r1
    ; Undefined symbol
    mov r1, #0
    mov r2, #1
    sub r1, r1, r2
    ; Store to variable sp
    store r1, [sp]
    mov r0, r1
    ; Return statement
    ; Undefined symbol
    mov r1, #0
    ; Undefined symbol
    mov r2, #0
    mul r2, r2, #4
    add r1, r1, r2
    load r0, [r1]
    add sp, sp, #64
    pop fp
    ret 
main_end:
    add sp, sp, #64
    pop fp
    ret 


; Program entry point
_start:
    call main
    halt
