; Hello World Program for 32-bit Microprocessor; Demonstrates basic I/O and string output capabilities; Program starts at kernel space.org 0x8000start:    ; Initialize stack pointer    LOADI R15, #0x7FF0    ; Stack pointer at high memory        ; Initialize UART status register address    LOADI R10, #0xFF00    ; UART status register    LOADI R11, #0xFF04    ; UART data register        ; Initialize message pointer    LOADI R12, #message   ; R12 points to message string    print_loop:    ; Load character from message    LOAD R13, R12, #0     ; Load character        ; Check for null terminator    ANDI R14, R13, #0xFF  ; Mask to byte    BEQ R14, #0, done     ; If null, we're done        ; Wait for UART readywait_uart:    LOAD R14, R10, #0     ; Load UART status    ANDI R14, R14, #1     ; Check ready bit    BEQ R14, #0, wait_uart ; Wait until ready        ; Send character    STORE R13, R11, #0    ; Store character to UART data        ; Move to next character    ADDI R12, R12, #4     ; Next word (32-bit addressing)    JMP print_loop    done:    ; Print completion message    LOADI R0, #0x444F4E45 ; "DONE" in ASCII    STORE R0, R11, #0     ; Send to UART        HALTmessage:    .word 0x48656C6C      ; "Hell"    .word 0x6F20576F      ; "o Wo"      .word 0x726C6421      ; "rld!"    .word 0x0A0D0000      ; "\n\r\0"