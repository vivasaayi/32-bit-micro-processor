; Generated by Enhanced C Compiler
; Support for arrays, structs, malloc, and JVM features
.org 0x8000

; Initialize stack pointer
LOADI R30, #0x000F0000
; Initialize heap pointer
LOADI R29, #0x20000

; Function: main
main:
MOVE R1, R0
MOVE R2, R0
MOVE R3, R0
MOVE R4, R0
MOVE R5, R0
MOVE R6, R0
MOVE R7, R0
MOVE R8, R0
LOADI R9, #0
MOVE R4, R9
LOADI R10, #0
MOVE R5, R10
LOADI R11, #0
MOVE R6, R11
LOADI R12, #0
MOVE R7, R12
LOADI R13, #0
MOVE R8, R13
LOADI R14, #0
SUB R15, R4, R14
JZ EQUAL0
JMP NOT_EQUAL1
EQUAL0:
LOADI R15, #1
JMP END_CMP2
NOT_EQUAL1:
LOADI R15, #0
END_CMP2:
CMP R15, R0
JZ ELSE3
LOADI R16, #10
MOVE R1, R16
JMP END_IF4
ELSE3:
END_IF4:
LOADI R17, #1
SUB R18, R4, R17
JZ EQUAL5
JMP NOT_EQUAL6
EQUAL5:
LOADI R18, #1
JMP END_CMP7
NOT_EQUAL6:
LOADI R18, #0
END_CMP7:
CMP R18, R0
JZ ELSE8
LOADI R19, #10
MOVE R2, R19
JMP END_IF9
ELSE8:
END_IF9:
LOADI R20, #1
ADD R21, R4, R20
MOVE R4, R21
LOADI R22, #1
SUB R23, R4, R22
MOVE R4, R23
LOADI R24, #0
SUB R25, R4, R24
JZ EQUAL10
JMP NOT_EQUAL11
EQUAL10:
LOADI R25, #1
JMP END_CMP12
NOT_EQUAL11:
LOADI R25, #0
END_CMP12:
CMP R25, R0
JZ ELSE13
MOVE R5, R1
JMP END_IF14
ELSE13:
END_IF14:
LOADI R26, #1
SUB R27, R4, R26
JZ EQUAL15
JMP NOT_EQUAL16
EQUAL15:
LOADI R27, #1
JMP END_CMP17
NOT_EQUAL16:
LOADI R27, #0
END_CMP17:
CMP R27, R0
JZ ELSE18
MOVE R5, R2
JMP END_IF19
ELSE18:
END_IF19:
LOADI R28, #0
SUB R29, R4, R28
JZ EQUAL20
JMP NOT_EQUAL21
EQUAL20:
LOADI R29, #1
JMP END_CMP22
NOT_EQUAL21:
LOADI R29, #0
END_CMP22:
CMP R29, R0
JZ ELSE23
LOADI R1, #5
JMP END_IF24
ELSE23:
END_IF24:
LOADI R2, #1
SUB R3, R4, R2
JZ EQUAL25
JMP NOT_EQUAL26
EQUAL25:
LOADI R3, #1
JMP END_CMP27
NOT_EQUAL26:
LOADI R3, #0
END_CMP27:
CMP R3, R0
JZ ELSE28
LOADI R4, #5
MOVE R2, R4
JMP END_IF29
ELSE28:
END_IF29:
LOADI R5, #1
ADD R6, R4, R5
MOVE R4, R6
LOADI R7, #1
SUB R8, R4, R7
MOVE R4, R8
LOADI R9, #0
SUB R10, R4, R9
JZ EQUAL30
JMP NOT_EQUAL31
EQUAL30:
LOADI R10, #1
JMP END_CMP32
NOT_EQUAL31:
LOADI R10, #0
END_CMP32:
CMP R10, R0
JZ ELSE33
MOVE R6, R1
JMP END_IF34
ELSE33:
END_IF34:
LOADI R11, #1
SUB R12, R4, R11
JZ EQUAL35
JMP NOT_EQUAL36
EQUAL35:
LOADI R12, #1
JMP END_CMP37
NOT_EQUAL36:
LOADI R12, #0
END_CMP37:
CMP R12, R0
JZ ELSE38
MOVE R6, R2
JMP END_IF39
ELSE38:
END_IF39:
LOADI R13, #0
SUB R14, R4, R13
JZ EQUAL40
JMP NOT_EQUAL41
EQUAL40:
LOADI R14, #1
JMP END_CMP42
NOT_EQUAL41:
LOADI R14, #0
END_CMP42:
CMP R14, R0
JZ ELSE43
MOVE R1, R5
JMP END_IF44
ELSE43:
END_IF44:
LOADI R15, #1
SUB R16, R4, R15
JZ EQUAL45
JMP NOT_EQUAL46
EQUAL45:
LOADI R16, #1
JMP END_CMP47
NOT_EQUAL46:
LOADI R16, #0
END_CMP47:
CMP R16, R0
JZ ELSE48
MOVE R2, R5
JMP END_IF49
ELSE48:
END_IF49:
LOADI R17, #1
ADD R18, R4, R17
MOVE R4, R18
LOADI R19, #0
SUB R20, R4, R19
JZ EQUAL50
JMP NOT_EQUAL51
EQUAL50:
LOADI R20, #1
JMP END_CMP52
NOT_EQUAL51:
LOADI R20, #0
END_CMP52:
CMP R20, R0
JZ ELSE53
MOVE R1, R6
JMP END_IF54
ELSE53:
END_IF54:
LOADI R21, #1
SUB R22, R4, R21
JZ EQUAL55
JMP NOT_EQUAL56
EQUAL55:
LOADI R22, #1
JMP END_CMP57
NOT_EQUAL56:
LOADI R22, #0
END_CMP57:
CMP R22, R0
JZ ELSE58
MOVE R2, R6
JMP END_IF59
ELSE58:
END_IF59:
LOADI R23, #1
ADD R24, R4, R23
MOVE R4, R24
LOADI R25, #1
SUB R26, R4, R25
MOVE R4, R26
MOVE R27, R0
LOADI R28, #0
SUB R29, R4, R28
JZ EQUAL60
JMP NOT_EQUAL61
EQUAL60:
LOADI R29, #1
JMP END_CMP62
NOT_EQUAL61:
LOADI R29, #0
END_CMP62:
CMP R29, R0
JZ ELSE63
MOVE R27, R1
JMP END_IF64
ELSE63:
END_IF64:
LOADI R1, #1
SUB R2, R4, R1
JZ EQUAL65
JMP NOT_EQUAL66
EQUAL65:
LOADI R2, #1
JMP END_CMP67
NOT_EQUAL66:
LOADI R2, #0
END_CMP67:
CMP R2, R0
JZ ELSE68
MOVE R27, R2
JMP END_IF69
ELSE68:
END_IF69:
LOADI R3, #1
SUB R4, R4, R3
MOVE R5, R0
LOADI R6, #0
SUB R7, R4, R6
JZ EQUAL70
JMP NOT_EQUAL71
EQUAL70:
LOADI R7, #1
JMP END_CMP72
NOT_EQUAL71:
LOADI R7, #0
END_CMP72:
CMP R7, R0
JZ ELSE73
MOVE R5, R1
JMP END_IF74
ELSE73:
END_IF74:
LOADI R8, #1
SUB R9, R4, R8
JZ EQUAL75
JMP NOT_EQUAL76
EQUAL75:
LOADI R9, #1
JMP END_CMP77
NOT_EQUAL76:
LOADI R9, #0
END_CMP77:
CMP R9, R0
JZ ELSE78
MOVE R5, R2
JMP END_IF79
ELSE78:
END_IF79:
ADD R11, R5, R27
MOVE R10, R11
LOADI R12, #0
SUB R13, R4, R12
JZ EQUAL80
JMP NOT_EQUAL81
EQUAL80:
LOADI R13, #1
JMP END_CMP82
NOT_EQUAL81:
LOADI R13, #0
END_CMP82:
CMP R13, R0
JZ ELSE83
MOVE R1, R10
JMP END_IF84
ELSE83:
END_IF84:
LOADI R14, #1
SUB R15, R4, R14
JZ EQUAL85
JMP NOT_EQUAL86
EQUAL85:
LOADI R15, #1
JMP END_CMP87
NOT_EQUAL86:
LOADI R15, #0
END_CMP87:
CMP R15, R0
JZ ELSE88
MOVE R2, R10
JMP END_IF89
ELSE88:
END_IF89:
LOADI R16, #1
ADD R17, R4, R16
MOVE R4, R17
LOADI R18, #1
SUB R19, R4, R18
MOVE R4, R19
LOADI R20, #0
SUB R21, R4, R20
JZ EQUAL90
JMP NOT_EQUAL91
EQUAL90:
LOADI R21, #1
JMP END_CMP92
NOT_EQUAL91:
LOADI R21, #0
END_CMP92:
CMP R21, R0
JZ ELSE93
MOVE R7, R1
JMP END_IF94
ELSE93:
END_IF94:
LOADI R22, #1
SUB R23, R4, R22
JZ EQUAL95
JMP NOT_EQUAL96
EQUAL95:
LOADI R23, #1
JMP END_CMP97
NOT_EQUAL96:
LOADI R23, #0
END_CMP97:
CMP R23, R0
JZ ELSE98
MOVE R7, R2
JMP END_IF99
ELSE98:
END_IF99:
LOADI R24, #0
SUB R25, R4, R24
JZ EQUAL100
JMP NOT_EQUAL101
EQUAL100:
LOADI R25, #1
JMP END_CMP102
NOT_EQUAL101:
LOADI R25, #0
END_CMP102:
CMP R25, R0
JZ ELSE103
MOVE R1, R7
JMP END_IF104
ELSE103:
END_IF104:
LOADI R26, #1
SUB R27, R4, R26
JZ EQUAL105
JMP NOT_EQUAL106
EQUAL105:
LOADI R27, #1
JMP END_CMP107
NOT_EQUAL106:
LOADI R27, #0
END_CMP107:
CMP R27, R0
JZ ELSE108
MOVE R2, R7
JMP END_IF109
ELSE108:
END_IF109:
LOADI R28, #1
ADD R29, R4, R28
MOVE R4, R29
LOADI R1, #1
SUB R2, R4, R1
MOVE R4, R2
MOVE R3, R0
LOADI R4, #0
SUB R5, R4, R4
JZ EQUAL110
JMP NOT_EQUAL111
EQUAL110:
LOADI R5, #1
JMP END_CMP112
NOT_EQUAL111:
LOADI R5, #0
END_CMP112:
CMP R5, R0
JZ ELSE113
MOVE R3, R1
JMP END_IF114
ELSE113:
END_IF114:
LOADI R6, #1
SUB R7, R4, R6
JZ EQUAL115
JMP NOT_EQUAL116
EQUAL115:
LOADI R7, #1
JMP END_CMP117
NOT_EQUAL116:
LOADI R7, #0
END_CMP117:
CMP R7, R0
JZ ELSE118
MOVE R3, R2
JMP END_IF119
ELSE118:
END_IF119:
MOVE R1, R3
HALT
HALT


HALT
