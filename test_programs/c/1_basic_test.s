; Generated by Simple C Compiler
; Custom RISC Assembly Output

    ; Runtime support functions
malloc:
    ; Simple malloc - returns fixed heap addresses
    load r1, heap_ptr
    add r2, r1, r0
    store r2, heap_ptr
    mov r0, r1
    ret

putchar:
    ; Output character in r0
    out r0
    ret

strlen:
    ; String length - string pointer in r0
    mov r1, r0
    mov r0, #0
strlen_loop:
    load r2, [r1]
    cmp r2, #0
    je strlen_end
    add r0, r0, #1
    add r1, r1, #1
    jmp strlen_loop
strlen_end:
    ret

; Data section
heap_ptr: .word 0x10000

    ; Compound statement
    ; Function declaration
main:
    push fp
    mov fp, sp
    sub sp, sp, #64
    ; Compound statement
    ; Function call
    lea r3, str0
    jmp str0_end
str0: .string "Very Simple String Demo
"
str0_end:
    push r3
    call log_string
    add sp, sp, #4
    mov r0, r0
    ; Variable declaration
; Variable x allocated at [fp-4]
    mov r1, #10
    ; Store initializer value for x
    store r1, [fp-4]
    ; Function call
    lea r3, str1
    jmp str1_end
str1: .string "Value of X=10
"
str1_end:
    push r3
    call log_string
    add sp, sp, #4
    mov r0, r0
    ; Variable declaration
; Variable y allocated at [fp-8]
    mov r1, #20
    ; Store initializer value for y
    store r1, [fp-8]
    ; Function call
    lea r3, str2
    jmp str2_end
str2: .string "Value of Y=20
"
str2_end:
    push r3
    call log_string
    add sp, sp, #4
    mov r0, r0
    ; Variable declaration
; Variable sum allocated at [fp-12]
    load r1, [fp-4]
    load r2, [fp-8]
    add r1, r1, r2
    ; Store initializer value for sum
    store r1, [fp-12]
    ; Function call
    lea r3, str3
    jmp str3_end
str3: .string "Value of Sum=30
"
str3_end:
    push r3
    call log_string
    add sp, sp, #4
    mov r0, r0
    ; If statement
    load r1, [fp-12]
    mov r2, #3110
    cmp r1, r2
    seteq r0
    cmp r0, #0
    je L4
    ; Compound statement
    ; Function call
    lea r3, str6
    jmp str6_end
str6: .string "Sum check passed
"
str6_end:
    push r3
    call log_string
    add sp, sp, #4
    mov r0, r0
    ; Return statement
    mov r0, #133
    add sp, sp, #64
    pop fp
    ret 
    jmp L5
L4:
    ; Compound statement
    ; Function call
    lea r3, str7
    jmp str7_end
str7: .string "Sum check failed
"
str7_end:
    push r3
    call log_string
    add sp, sp, #4
    mov r0, r0
    ; Return statement
    mov r0, #444
    add sp, sp, #64
    pop fp
    ret 
L5:
main_end:
    add sp, sp, #64
    pop fp
    ret 


; Program entry point
_start:
    call main
    halt
