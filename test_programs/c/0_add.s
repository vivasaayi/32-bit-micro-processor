; Generated by Simple C Compiler
; Custom RISC Assembly Output

    ; Runtime support functions
malloc:
    ; Simple malloc - returns fixed heap addresses
    load r1, heap_ptr
    add r2, r1, r0
    store r2, heap_ptr
    mov r0, r1
    ret

putchar:
    ; Output character in r0
    out r0
    ret

strlen:
    ; String length - string pointer in r0
    mov r1, r0
    mov r0, #0
strlen_loop:
    load r2, [r1]
    cmp r2, #0
    je strlen_end
    add r0, r0, #1
    add r1, r1, #1
    jmp strlen_loop
strlen_end:
    ret

; Data section
heap_ptr: .word 0x10000

    ; Compound statement
    ; Function declaration
main:
    push fp
    mov fp, sp
    sub sp, sp, #64
    ; Compound statement
    ; Variable declaration
; Variable result allocated at [fp-4]
    mov r1, #0
    ; Store initializer value for result
    store r1, [fp-4]
    ; Compound assignment - expanding to regular assignment
    ; Load current value of result
    load r2, [fp-4]
    mov r3, #10
    add r1, r2, r3
    ; Store to variable result
    store r1, [fp-4]
    mov r0, r1
    ; Compound assignment - expanding to regular assignment
    ; Load current value of result
    load r2, [fp-4]
    mov r3, #20
    add r1, r2, r3
    ; Store to variable result
    store r1, [fp-4]
    mov r0, r1
    ; Compound assignment - expanding to regular assignment
    ; Load current value of result
    load r2, [fp-4]
    mov r3, #30
    add r1, r2, r3
    ; Store to variable result
    store r1, [fp-4]
    mov r0, r1
    ; Compound assignment - expanding to regular assignment
    ; Load current value of result
    load r2, [fp-4]
    mov r3, #40
    add r1, r2, r3
    ; Store to variable result
    store r1, [fp-4]
    mov r0, r1
    ; Compound assignment - expanding to regular assignment
    ; Load current value of result
    load r2, [fp-4]
    mov r3, #50
    add r1, r2, r3
    ; Store to variable result
    store r1, [fp-4]
    mov r0, r1
    ; Function call
    lea r3, str0
    jmp str0_end
str0: .string "The sum is: %d
"
str0_end:
    push r3
    load r3, [fp-4]
    push r3
    call printf
    add sp, sp, #8
    mov r0, r0
    ; Return statement
    mov r0, #0
    add sp, sp, #64
    pop fp
    ret 
main_end:
    add sp, sp, #64
    pop fp
    ret 


; Program entry point
_start:
    call main
    halt
