#!/usr/bin/env python3

"""
Generate character ROM for 8x16 font
Creates a hex file with basic ASCII characters
"""

def generate_char_rom():
    """Generate basic 8x16 character bitmaps"""
    
    # Simple font data for basic ASCII characters (32-127)
    # Each character is 16 rows of 8 bits
    
    char_data = {}
    
    # Space (32)
    char_data[32] = [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ]
    
    # ! (33)
    char_data[33] = [
        0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
        0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00
    ]
    
    # " (34)
    char_data[34] = [
        0x00, 0x00, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ]
    
    # A (65)
    char_data[65] = [
        0x00, 0x00, 0x18, 0x24, 0x42, 0x42, 0x7E, 0x42,
        0x42, 0x42, 0x42, 0x42, 0x00, 0x00, 0x00, 0x00
    ]
    
    # B (66)
    char_data[66] = [
        0x00, 0x00, 0x7C, 0x42, 0x42, 0x42, 0x7C, 0x42,
        0x42, 0x42, 0x42, 0x7C, 0x00, 0x00, 0x00, 0x00
    ]
    
    # C (67)
    char_data[67] = [
        0x00, 0x00, 0x3C, 0x42, 0x40, 0x40, 0x40, 0x40,
        0x40, 0x40, 0x42, 0x3C, 0x00, 0x00, 0x00, 0x00
    ]
    
    # 0 (48)
    char_data[48] = [
        0x00, 0x00, 0x3C, 0x42, 0x46, 0x4A, 0x52, 0x62,
        0x42, 0x42, 0x42, 0x3C, 0x00, 0x00, 0x00, 0x00
    ]
    
    # 1 (49)
    char_data[49] = [
        0x00, 0x00, 0x18, 0x38, 0x18, 0x18, 0x18, 0x18,
        0x18, 0x18, 0x18, 0x7E, 0x00, 0x00, 0x00, 0x00
    ]
    
    # > (62) - prompt character
    char_data[62] = [
        0x00, 0x00, 0x00, 0x40, 0x20, 0x10, 0x08, 0x04,
        0x08, 0x10, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00
    ]
    
    # * (42) - cursor/bullet
    char_data[42] = [
        0x00, 0x00, 0x00, 0x00, 0x42, 0x24, 0x18, 0xFF,
        0x18, 0x24, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00
    ]
    
    # Create full ROM with 256 characters
    rom_data = []
    
    for char_code in range(256):
        if char_code in char_data:
            # Use defined character
            for row in char_data[char_code]:
                rom_data.append(f"{row:02X}")
        else:
            # Default character (block)
            if 32 <= char_code <= 126:  # Printable ASCII
                # Simple block character for undefined printables
                for row in [0x00, 0x00, 0xFF, 0x81, 0x81, 0x81, 0x81, 0x81,
                           0x81, 0x81, 0x81, 0x81, 0xFF, 0x00, 0x00, 0x00]:
                    rom_data.append(f"{row:02X}")
            else:
                # Empty character for non-printables
                for row in range(16):
                    rom_data.append("00")
    
    return rom_data

def write_hex_file(filename, data):
    """Write data to hex file"""
    with open(filename, 'w') as f:
        for i, byte in enumerate(data):
            f.write(byte)
            if (i + 1) % 16 == 0:
                f.write('\n')
            else:
                f.write(' ')

if __name__ == "__main__":
    print("Generating character ROM...")
    rom_data = generate_char_rom()
    write_hex_file("char_rom.hex", rom_data)
    print(f"Generated {len(rom_data)} bytes of character ROM data")
    print("Character ROM saved to char_rom.hex")
