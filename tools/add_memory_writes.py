#!/usr/bin/env python3
"""
Post-processor to add memory writing instructions to assembly generated by C compiler.
This script adds STORE instructions to actually write log data to memory.
"""

import sys
import re

def add_memory_writes(asm_content):
    """Add STORE instructions to write data to memory in logging functions"""
    
    # Pattern to find logging functions and add memory writes
    patterns = [
        # log_x_equals_10: Write "x=10\n" to 0x3000
        {
            'function': 'log_x_equals_10:',
            'replacements': [
                ('MOVE R3, R4', 'MOVE R3, R4\n; Store \'x\' to memory\nLOADI R0, #0x3000\nSTORE R3, R0, #0'),
                ('MOVE R5, R6', 'MOVE R5, R6\n; Store \'=\' to memory\nLOADI R0, #0x3000\nSTORE R5, R0, #1'),
                ('MOVE R7, R8', 'MOVE R7, R8\n; Store \'1\' to memory\nLOADI R0, #0x3000\nSTORE R7, R0, #2'),
                ('MOVE R9, R10', 'MOVE R9, R10\n; Store \'0\' to memory\nLOADI R0, #0x3000\nSTORE R9, R0, #3'),
                ('MOVE R11, R12', 'MOVE R11, R12\n; Store \'\\n\' to memory\nLOADI R0, #0x3000\nSTORE R11, R0, #4'),
                ('HALT\nRET', 'RET')
            ]
        },
        # log_y_equals_20: Write "y=20\n" to 0x3005
        {
            'function': 'log_y_equals_20:',
            'replacements': [
                ('MOVE R3, R14', 'MOVE R3, R14\n; Store \'y\' to memory\nLOADI R0, #0x3000\nSTORE R3, R0, #5'),
                ('MOVE R5, R15', 'MOVE R5, R15\n; Store \'=\' to memory\nLOADI R0, #0x3000\nSTORE R5, R0, #6'),
                ('MOVE R7, R16', 'MOVE R7, R16\n; Store \'2\' to memory\nLOADI R0, #0x3000\nSTORE R7, R0, #7'),
                ('MOVE R9, R17', 'MOVE R9, R17\n; Store \'0\' to memory\nLOADI R0, #0x3000\nSTORE R9, R0, #8'),
                ('MOVE R11, R18', 'MOVE R11, R18\n; Store \'\\n\' to memory\nLOADI R0, #0x3000\nSTORE R11, R0, #9'),
            ]
        },
        # set_log_length_to_17: Write 17 to 0x4000
        {
            'function': 'set_log_length_to_17:',
            'replacements': [
                ('MOVE R1, R2', 'MOVE R1, R2\n; Store log length to memory\nLOADI R0, #0x4000\nSTORE R1, R0, #0'),
            ]
        }
    ]
    
    result = asm_content
    
    for pattern in patterns:
        # Find the function
        func_start = result.find(pattern['function'])
        if func_start == -1:
            print(f"Warning: Function {pattern['function']} not found")
            continue
            
        # Apply replacements within this function
        for old, new in pattern['replacements']:
            result = result.replace(old, new)
    
    return result

def main():
    if len(sys.argv) != 3:
        print("Usage: python3 add_memory_writes.py input.asm output.asm")
        sys.exit(1)
    
    input_file = sys.argv[1]
    output_file = sys.argv[2]
    
    try:
        with open(input_file, 'r') as f:
            content = f.read()
        
        modified_content = add_memory_writes(content)
        
        with open(output_file, 'w') as f:
            f.write(modified_content)
        
        print(f"Added memory write instructions to {output_file}")
        
    except Exception as e:
        print(f"Error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
